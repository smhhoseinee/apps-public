apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ .Values.cluster_name }}
spec:
  instances: {{ .Values.instances }}
  imageName: "{{ .Values.image.imageName }}:{{ .Values.image.tag }}"
  startDelay: 150
  stopDelay: 150
  smartShutdownTimeout: 75
  primaryUpdateStrategy: unsupervised
  superuserSecret:
    name: {{ .Values.superuser_secret }}
  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'
    pg_hba:
      - "host all all 0.0.0.0/0 trust" # this line enabled logical replication with programmatic access
      - "host all postgres 0.0.0.0/0 md5"
  bootstrap:
    initdb:
      database: {{ .Values.db_name }}
      owner: {{ .Values.db_user_name }}
      secret:
        name: {{ .Values.db_user_secret }}
  resources:
    requests:
      memory: "1Gi"
      cpu: '1'
    limits:
      memory: "2Gi"
      cpu: '2'
  logLevel: warning
  storage:
    storageClass: {{ .Values.storage.storage_class }}
    size: {{ .Values.storage.storage_size }}
  walStorage:
    storageClass: {{ .Values.storage.storage_class }}
    size: {{ .Values.storage.wal_storage_size }}
  monitoring:
    enablePodMonitor: true
  backup:
    barmanObjectStore:
      wal:
        compression: gzip
        maxParallel: 8
      data:
        compression: gzip
        jobs: 2
      tags:
        backupRetentionPolicy: "expire"
      historyTags:
        backupRetentionPolicy: "keep"
      destinationPath: {{ .Values.s3.destinationPath }}
      endpointURL: {{ .Values.s3.endpointURL }}
      s3Credentials:
        accessKeyId:
          name: {{ .Values.s3.secretName }}
          key: {{ .Values.s3.accessKeyId }}
        secretAccessKey:
          name: {{ .Values.s3.secretName }}
          key: {{ .Values.s3.secretAccessKey }}
    retentionPolicy: "10d"
  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: true
